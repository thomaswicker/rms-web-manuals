
@import '../global/vars';

/*
  __  __ _____  _____ _   _ ____  
 |  \/  |_ _\ \/ /_ _| \ | / ___| 
 | |\/| || | \  / | ||  \| \___ \ 
 | |  | || | /  \ | || |\  |___) |
 |_|  |_|___/_/\_\___|_| \_|____/ 
                                                                                                                                                                                                                                               
*/

@mixin margin($top: 0, $right: $top or $left, $bottom: $top, $left: $right or $top) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}

@mixin padding($top: 0, $right: $top or $left, $bottom: $top, $left: $right or $top) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

@mixin border-radius($radius-amount){
    // Safari 3-4, iOS 1-3.2, Android 1.6
    -webkit-border-radius: $radius-amount; 

    // Firefox 1-3.6
    -moz-border-radius: $radius-amount; 
    
    // Opera 10.5, IE 9, Safari 5, Chrome, Firefox 4, iOS 4, Android 2.1+
    border-radius: $radius-amount; 
}

@mixin border-box {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; 
}

@mixin box-shadow($top, $left, $blur, $color) {
  -webkit-box-shadow: $top $left $blur $color;
  -moz-box-shadow: $top $left $blur $color;
  box-shadow: $top $left $blur $color;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

%clearfix {
  *zoom: 1;
  &:before, 
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
} 

/* % Prefixers % */

@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

/* % Inline-Block for IE % */

@mixin inline-block {
  display: inline-block;
  *zoom: 1;
  *display: inline;
  *vertical-align:auto;
}

@mixin font($font, $style: normal, $size: 1rem, $weight: $font-weight-normal) {
  font-family: $font, Helvetica, Arial, sans-serif;
  font-style:  $style;
  font-weight: $weight;
  font-size: $size;
}

/* % REM conversion to pixels % */

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*$font-1-reset/10};

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value/10}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

 @if $support-legacy {
  #{$property}: $pxValues;
 }
  #{$property}: $remValues;
}


@mixin mq($query){

    @if $query == sm {
        @media only screen and (min-width: $sm-start) and (max-width: $sm-end) { @content; }
    }

    @if $query == md{
        @media only screen and (min-width: $md-start) and (max-width: $md-end) { @content; }
    }

    @if $query == lg{
        @media only screen and (min-width: $lg-start) and (max-width: $lg-end) { @content; }
    }

    @if $query == lg-l{
        @media (min-width: $lg-start) and (max-width: $lg-end) and (orientation : landscape) { @content; }
    }

    @if $query == jumbo{
        @media only screen and (min-width: $jumbo-start) { @content; }
    } 
}